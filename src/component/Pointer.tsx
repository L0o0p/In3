/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/Pointer.glb 
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { Mesh } from 'three';
import * as THREE from 'three'
import { useFrame, useThree } from '@react-three/fiber';

interface ModelNodes {
  [name: string]: Mesh;
}


export const Pointer = (props: ModelNodes) => {
  const { nodes } = useGLTF('/Pointer.glb') as unknown as { nodes: ModelNodes };
  const { materials } = useGLTF('/Pointer.glb')
  const ref = useRef<THREE.Group>(null)
  const { viewport } = useThree()

  useFrame(({ pointer }) => {
    const x = (pointer.x * viewport.width) / 2
    const y = (pointer.y * viewport.height) / 2
    if (ref.current) {
      ref.current.position.set(x, y, 0)
      // ref.current.rotation.set(-y, x, 0)
    }
  })
  return (
    <group {...props} dispose={null}
      ref={ref}
      scale={5}
      rotation={[Math.PI / 2, Math.PI + Math.PI / 9, Math.PI / 12]}
      position={[0, 0, 2]}
    >
      <mesh geometry={nodes.group2098783903.geometry} material={materials.mat16} />
    </group>
  )
}

useGLTF.preload('/Pointer.glb')
